(ns try-clojerl.repl
  (:require [try-clojerl.clients :as client]
            [try-clojerl.tutorial :as tutorial]))

(declare build-reply eval-string init-repl)

(defn init
  [req state]
  ;; :compress should be true once ERL-494 is solved
  (let [opts #erl{:compress     false
                  :idle_timeout 600000}]
    #erl[:cowboy_websocket req state opts]))

(defn websocket_init [state]
  (lager/log :info (erlang/self) "REPL process started")
  (client/add (erlang/self))
  (init-repl)
  (let [erlang-version  (-> :system_version
                            erlang/system_info
                            erlang/list_to_binary)
        clojerl-version (str "Clojerl " (clojure-version))
        message         (str erlang-version
                             clojerl-version "\n"
                             (tutorial/slurp-html "welcome.html"))
        reply           (build-reply :message message)]
    #erl[:reply reply state]))

(defn* websocket_handle [#erl[:text data] state]
  (let* [json          (jsx/decode data #erl(:return_maps))
         #erl[res out err] (eval-string (get json "cmd"))
         out-frame     (build-reply :result res
                                    :stdout out
                                    :stderr err)]
    #erl[:reply out-frame state]))

(defn* websocket_info
  ([#erl[:client-count c] state]
   (let [out-frame (build-reply :client_count c)]
     #erl[:reply out-frame state]))
  ([_info state]
   #erl[:ok state]))

(defn terminate [reason _ state]
  (client/remove (erlang/self))
  (lager/log :info
             (erlang/self)
             "REPL process terminated: ~p" #erl(reason))
  :ok)

(defn init-repl []
  (let [ns-name (->> (erlang/unique_integer #erl(:positive))
                     (str "clje.user-")
                     symbol)]
    (in-ns ns-name)
    (refer-clojure)
    (require '[clojure.repl :refer (source apropos dir pst doc find-doc)])
    (require '[clojure.pprint :refer (pp pprint)])
    (require '[try-clojerl.tutorial :as tutorial :refer (next-step prev-step)])
    (tutorial/init)))

(defn eval-string [s]
  (lager/log :info (erlang/self) "Eval: ~s" #erl(s))
  (with-open [out (erlang.io.StringWriter.)
              err (erlang.io.StringWriter.)]
    (binding [*out* out *err* err]
      (let [group-leader (erlang/group_leader)
            res (try
                  (erlang/group_leader (maps/get :pid out) (erlang/self))
                  (-> s read-string eval pr-str)
                  (catch _ e
                    (.write *err* (str "Error: " (pr-str e)))
                    "")
                  (finally
                    (erlang/group_leader group-leader (erlang/self))))]
        (tutorial/check-expr? s)
        #erl[res (str *out*) (str *err*)]))))

(defn prompt [] (str (.name *ns*) "=> "))

(defn build-reply
  [& keyvals]
  #erl[:text
       (jsx/encode (merge #erl{:prompt (prompt)}
                            (apply hash-map keyvals)))])
