(ns try-clojerl.app
  (:require [try-clojerl.sup :as sup]))

(declare start-cowboy)

(defn start [type args]
  (start-cowboy)
  (sup/start-link)
  #erl[:ok (erlang/self)])

(defn stop [state]
  state)

(def routes
  {:_ [["/"          :try-clojerl.layout :index]
       ["/about"     :try-clojerl.layout :about]
       ["/repl"      :try-clojerl.repl   nil]
       ["/css/[...]" :cowboy_static #erl[:priv_dir :try_clojerl "css"]]
       ["/img/[...]" :cowboy_static #erl[:priv_dir :try_clojerl "img"]]
       ["/js/[...]"  :cowboy_static #erl[:priv_dir :try_clojerl "js"]]]})

(defn- route->cowboy [[host handlers]]
  #erl[host (->erl (map into-tuple handlers))])

(defn start-cowboy []
  (let [routes (->erl (map route->cowboy routes))
        dispatch (cowboy_router/compile routes)
        transport-opts (maps/to_list (->erl {:port 8080}))
        protocol-opts (->erl {:env {:dispatch dispatch}})]
    (cowboy/start_clear :try-clojerl.listener transport-opts protocol-opts)))
