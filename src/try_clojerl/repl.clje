(ns try-clojerl.repl)

(declare build-reply)

(defn init
  [req state]
  ;; :compress should be true once ERL-494 is solved
  (let [opts #erl{:compress     false
                  :idle_timeout 600000}]
    #erl[:cowboy_websocket req state opts]))

(defn websocket_init [state]
  (ns clje.user)
  #erl[:reply (build-reply) state])

(defn* websocket_handle [#erl[:text data] state]
  (let* [json   (jsx/decode.e data #erl(:return_maps))
         result (try (eval (read-string (get json "cmd")))
                     (catch _ e e))
         out-frame (build-reply result)]
    #erl[:reply out-frame state]))

(defn websocket_info [_info state]
  #erl[:ok state])

(defn prompt [] (str *ns* "=> "))

(defn build-reply
  ([]
   #erl[:text
        (jsx/encode.e #erl{:current_ns (prompt)})])
  ([result]
   #erl[:text
        (jsx/encode.e #erl{:result (pr-str result)
                           :current_ns (prompt)})]))
