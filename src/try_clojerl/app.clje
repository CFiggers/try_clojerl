(ns try-clojerl.app
  (:require [try-clojerl.sup :as sup]))

(declare start-cowboy)

(defn start [type args]
  (start-cowboy)
  (sup/start-link)
  #erl[:ok (erlang/self)])

(defn stop [state]
  state)

(def routes
  '{:_ (["/"          :try-clojerl.layout :index]
        ["/about"     :try-clojerl.layout :about]
        ["/repl"      :try-clojerl.repl   nil]
        ["/css/[...]" :cowboy_static [:priv_dir :try_clojerl "css"]]
        ["/img/[...]" :cowboy_static [:priv_dir :try_clojerl "img"]]
        ["/js/[...]"  :cowboy_static [:priv_dir :try_clojerl "js"]])})

(defn start-cowboy []
  (let [routes (-> routes clj->erl maps/to_list)
        dispatch (cowboy_router/compile routes)
        transport-opts (-> {:port 8080} clj->erl maps/to_list)
        protocol-opts (clj->erl {:env {:dispatch dispatch}})]
    (cowboy/start_clear :try-clojerl.listener transport-opts protocol-opts)))
