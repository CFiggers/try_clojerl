(ns try-clojerl.repl)

(declare build-reply eval-string)

(defn init
  [req state]
  ;; :compress should be true once ERL-494 is solved
  (let [opts #erl{:compress     false
                  :idle_timeout 600000}]
    #erl[:cowboy_websocket req state opts]))

(defn websocket_init [state]
  (ns clje.user)
  #erl[:reply (build-reply) state])

(defn* websocket_handle [#erl[:text data] state]
  (let* [json          (jsx/decode.e data #erl(:return_maps))
         #erl[res out err] (eval-string (get json "cmd"))
         out-frame     (build-reply res out err)]
    #erl[:reply out-frame state]))

(defn websocket_info [_info state]
  #erl[:ok state])

(defn eval-string [s]
  (with-open [out (erlang.io.StringWriter.)
              err (erlang.io.StringWriter.)]
    (binding [*out* out *err* err]
      (let [res (try (-> s read-string eval pr-str)
                  (catch _ e
                    (.write *err* (str "Error: " (pr-str e)))
                    ""))]
        #erl[res (str *out*) (str *err*)]))))

(defn prompt [] (str *ns* "=> "))

(defn build-reply
  ([]
   #erl[:text
        (jsx/encode.e #erl{:prompt (prompt)})])
  ([res out err]
   #erl[:text
        (jsx/encode.e #erl{:result res
                           :stdout out
                           :stderr err
                           :prompt (prompt)})]))
