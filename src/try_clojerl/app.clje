(ns try-clojerl.app
  (:require [try-clojerl.sup :as sup]))

(declare start-cowboy)

(defn start [type args]
  (start-cowboy)
  (sup/start-link)
  #erl[:ok (erlang/self.e)])

(defn stop [state]
  state)

(defn ->list [s]
  (clj_rt/to_list.1 s))

(defn ->proplist [m]
  (->list (map into-tuple m)))

(def routes
  {:_ [["/"     :try-clojerl.root nil]
       ["/repl" :try-clojerl.repl nil]
       ["/css/[...]" :cowboy_static #erl[:priv_dir :try_clojerl "css"]]
       ["/js/[...]"  :cowboy_static #erl[:priv_dir :try_clojerl "js"]]]})

(defn- route->cowboy [[host handlers]]
  #erl[host (->list (map into-tuple handlers))])

(defn start-cowboy []
  (let [routes (->list (map route->cowboy routes))
        dispatch (cowboy_router/compile.e routes)
        acceptors 10
        port (->proplist {:port 8080})
        opts (->proplist {:env (->proplist {:dispatch dispatch})})]
    (cowboy/start_http.e :try-clojerl.listener acceptors port opts)))
