(ns try-clojerl.tutorial)

(def ^:dynamic *current-step*)

(def steps
  ["page1.html"
   "page2.html"
   "page3.html"
   "page4.html"
   "page5.html"
   "page6.html"
   "page7.html"
   "page8.html"
   "page9.html"
   "page10.html"
   "end.html"])

(defn init []
  (push-thread-bindings {#'*current-step* nil}))

(defn slurp-html [filename]
  (let [priv-dir (code/priv_dir :try_clojerl)
        path (str priv-dir "/html/" filename)]
    (slurp path)))

(defn show-step
  ([] (show-step *current-step*))
  ([n]
   (-> (steps n)
       slurp-html
       print)))

(defn help []
  (println (slurp-html "help.html")))

(defn start []
  (set! *current-step* 0)
  (show-step))

(defn next-step []
  (when (< *current-step* (dec (count steps)))
    (set! *current-step* (inc *current-step*)))
  (show-step))

(defn prev-step []
  (when (< 0 *current-step*)
    (set! *current-step* (dec *current-step*)))
  (show-step))

(defn restart []
  (start))
